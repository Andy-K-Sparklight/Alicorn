"use strict";const{BalancedPoolMissingUpstreamError}=require("./core/errors"),{PoolBase,kClients,kNeedDrain,kAddClient,kRemoveClient,kDispatch}=require("./pool-base"),Pool=require("./pool"),{kUrl}=require("./core/symbols"),kOptions=Symbol("options");class BalancedPool extends PoolBase{constructor(e=[],s={}){super(),this[kOptions]=s,Array.isArray(e)||(e=[e]);for(const s of e)this.addUpstream(s)}addUpstream(e){return this[kClients].find((s=>s[kUrl].origin===e&&!0!==s.closed&&!0!==s.destroyed))||this[kAddClient](new Pool(e,Object.assign({},this[kOptions]))),this}removeUpstream(e){const s=this[kClients].find((s=>s[kUrl].origin===e&&!0!==s.closed&&!0!==s.destroyed));return s&&this[kRemoveClient](s),this}get upstreams(){return this[kClients].filter((e=>!0!==e.closed&&!0!==e.destroyed)).map((e=>e[kUrl].origin))}[kDispatch](){if(0===this[kClients].length)throw new BalancedPoolMissingUpstreamError;let e=this[kClients].find((e=>!e[kNeedDrain]&&!0!==e.closed&&!0!==e.destroyed));if(e)return this[kClients].splice(this[kClients].indexOf(e),1),this[kClients].push(e),e}}module.exports=BalancedPool;