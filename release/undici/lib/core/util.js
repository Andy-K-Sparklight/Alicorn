"use strict";const assert=require("assert"),{kDestroyed,kBodyUsed}=require("./symbols"),{IncomingMessage}=require("http"),stream=require("stream"),net=require("net"),{InvalidArgumentError}=require("./errors"),{Blob}=require("buffer"),nodeUtil=require("util");function nop(){}function isStream(e){return e&&"function"==typeof e.pipe}function isBlobLike(e){return Blob&&e instanceof Blob||e&&"object"==typeof e&&("function"==typeof e.stream||"function"==typeof e.arrayBuffer)&&/^(Blob|File)$/.test(e[Symbol.toStringTag])}function parseURL(e){if("string"==typeof e&&(e=new URL(e)),!e||"object"!=typeof e)throw new InvalidArgumentError("invalid url");if(null!=e.port&&""!==e.port&&!Number.isFinite(parseInt(e.port)))throw new InvalidArgumentError("invalid port");if(null!=e.path&&"string"!=typeof e.path)throw new InvalidArgumentError("invalid path");if(null!=e.pathname&&"string"!=typeof e.pathname)throw new InvalidArgumentError("invalid pathname");if(null!=e.hostname&&"string"!=typeof e.hostname)throw new InvalidArgumentError("invalid hostname");if(null!=e.origin&&"string"!=typeof e.origin)throw new InvalidArgumentError("invalid origin");if(!/^https?:/.test(e.origin||e.protocol))throw new InvalidArgumentError("invalid protocol");if(!(e instanceof URL)){const t=null!=e.port?e.port:"https:"===e.protocol?443:80,r=null!=e.origin?e.origin:`${e.protocol}//${e.hostname}:${t}`,n=null!=e.path?e.path:`${e.pathname||""}${e.search||""}`;e=new URL(n,r)}return e}function parseOrigin(e){if("/"!==(e=parseURL(e)).pathname||e.search||e.hash)throw new InvalidArgumentError("invalid url");return e}function getHostname(e){if("["===e[0]){const t=e.indexOf("]");return assert(-1!==t),e.substr(1,t-1)}const t=e.indexOf(":");return-1===t?e:e.substr(0,t)}function getServerName(e){if(!e)return null;assert.strictEqual(typeof e,"string");const t=getHostname(e);return net.isIP(t)?"":t}function deepClone(e){return JSON.parse(JSON.stringify(e))}function isAsyncIterable(e){return!(null==e||"function"!=typeof e[Symbol.asyncIterator])}function isIterable(e){return!(null==e||"function"!=typeof e[Symbol.iterator]&&"function"!=typeof e[Symbol.asyncIterator])}function bodyLength(e){if(null==e)return 0;if(isStream(e)){const t=e._readableState;return t&&!0===t.ended&&Number.isFinite(t.length)?t.length:null}return isBlobLike(e)?null!=e.size?e.size:null:isBuffer(e)?e.byteLength:null}function isDestroyed(e){return!e||!(!e.destroyed&&!e[kDestroyed])}function isAborted(e){const t=e&&e._readableState;return isDestroyed(e)&&t&&!t.endEmitted}function destroy(e,t){isStream(e)&&!isDestroyed(e)&&("function"==typeof e.destroy?(Object.getPrototypeOf(e).constructor===IncomingMessage&&(e.socket=null),e.destroy(t)):t&&process.nextTick(((e,t)=>{e.emit("error",t)}),e,t),!0!==e.destroyed&&(e[kDestroyed]=!0))}const KEEPALIVE_TIMEOUT_EXPR=/timeout=(\d+)/;function parseKeepAliveTimeout(e){const t=e.toString().match(KEEPALIVE_TIMEOUT_EXPR);return t?1e3*parseInt(t[1],10):null}function parseHeaders(e,t={}){for(let r=0;r<e.length;r+=2){const n=e[r].toString().toLowerCase();let o=t[n];o?(Array.isArray(o)||(o=[o],t[n]=o),o.push(e[r+1].toString())):t[n]=e[r+1].toString()}return t}function isBuffer(e){return e instanceof Uint8Array||Buffer.isBuffer(e)}function validateHandler(e,t,r){if(!e||"object"!=typeof e)throw new InvalidArgumentError("handler must be an object");if("function"!=typeof e.onConnect)throw new InvalidArgumentError("invalid onConnect method");if("function"!=typeof e.onError)throw new InvalidArgumentError("invalid onError method");if("function"!=typeof e.onBodySent&&void 0!==e.onBodySent)throw new InvalidArgumentError("invalid onBodySent method");if(r||"CONNECT"===t){if("function"!=typeof e.onUpgrade)throw new InvalidArgumentError("invalid onUpgrade method")}else{if("function"!=typeof e.onHeaders)throw new InvalidArgumentError("invalid onHeaders method");if("function"!=typeof e.onData)throw new InvalidArgumentError("invalid onData method");if("function"!=typeof e.onComplete)throw new InvalidArgumentError("invalid onComplete method")}}function isDisturbed(e){const t=e&&e._readableState;return!(!e||!(stream.isDisturbed&&stream.isDisturbed(e)||e[kBodyUsed]||e.readableDidRead||t&&t.dataEmitted||isAborted(e)))}function getSocketInfo(e){return{localAddress:e.localAddress,localPort:e.localPort,remoteAddress:e.remoteAddress,remotePort:e.remotePort,remoteFamily:e.remoteFamily,timeout:e.timeout,bytesWritten:e.bytesWritten,bytesRead:e.bytesRead}}let ReadableStream;function ReadableStreamFrom(e){if(ReadableStream||(ReadableStream=require("stream/web").ReadableStream),ReadableStream.from)return ReadableStream.from(e);let t;return new ReadableStream({async start(){t=e[Symbol.asyncIterator]()},async pull(e){const{done:r,value:n}=await t.next();if(r)queueMicrotask((()=>{e.close()}));else{const t=Buffer.isBuffer(n)?n:Buffer.from(n);e.enqueue(new Uint8Array(t))}return e.desiredSize>0},async cancel(e){await t.return()}},0)}const kEnumerableProperty=Object.create(null);kEnumerableProperty.enumerable=!0,module.exports={kEnumerableProperty,nop,isDisturbed,toUSVString:nodeUtil.toUSVString||(e=>`${e}`),isAborted,isBlobLike,parseOrigin,parseURL,getServerName,isStream,isIterable,isAsyncIterable,isDestroyed,parseHeaders,parseKeepAliveTimeout,destroy,bodyLength,deepClone,ReadableStreamFrom,isBuffer,validateHandler,getSocketInfo};