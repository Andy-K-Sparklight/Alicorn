"use strict";const net=require("net"),tls=require("tls"),assert=require("assert"),util=require("./util"),{InvalidArgumentError,ConnectTimeoutError}=require("./errors");function buildConnector({maxCachedSessions:e,socketPath:t,timeout:n,...r}){if(null!=e&&(!Number.isInteger(e)||e<0))throw new InvalidArgumentError("maxCachedSessions must be a positive integer or zero");const o={path:t,...r},s=new Map;return n=null==n?1e4:n,e=null==e?100:e,function({hostname:t,host:r,protocol:i,port:u,servername:l},c){let a;if("https:"===i){const n=(l=l||o.servername||util.getServerName(r)||null)||t,i=s.get(n)||null;assert(n),a=tls.connect({highWaterMark:16384,...o,servername:l,session:i,port:u||443,host:t}),a.on("session",(function(t){if(0!==e){if(s.size>=e){const{value:e}=s.keys().next();s.delete(e)}s.set(n,t)}})).on("error",(function(e){n&&"UND_ERR_INFO"!==e.code&&s.delete(n)}))}else a=net.connect({highWaterMark:65536,...o,port:u||80,host:t});const m=n?setTimeout(onConnectTimeout,n,a):null;return a.setNoDelay(!0).once("https:"===i?"secureConnect":"connect",(function(){if(clearTimeout(m),c){const e=c;c=null,e(null,this)}})).on("error",(function(e){if(clearTimeout(m),c){const t=c;c=null,t(e)}})),a}}function onConnectTimeout(e){util.destroy(e,new ConnectTimeoutError)}module.exports=buildConnector;