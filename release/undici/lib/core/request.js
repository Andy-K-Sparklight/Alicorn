"use strict";const{InvalidArgumentError,NotSupportedError}=require("./errors"),util=require("./util"),assert=require("assert"),kHandler=Symbol("handler"),channels={};try{const e=require("diagnostics_channel");channels.create=e.channel("undici:request:create"),channels.bodySent=e.channel("undici:request:bodySent"),channels.headers=e.channel("undici:request:headers"),channels.trailers=e.channel("undici:request:trailers"),channels.error=e.channel("undici:request:error")}catch{channels.create={hasSubscribers:!1},channels.bodySent={hasSubscribers:!1},channels.headers={hasSubscribers:!1},channels.trailers={hasSubscribers:!1},channels.error={hasSubscribers:!1}}class Request{constructor(e,{path:r,method:t,body:n,headers:s,idempotent:i,blocking:a,upgrade:o,headersTimeout:h,bodyTimeout:l},d){if("string"!=typeof r)throw new InvalidArgumentError("path must be a string");if("/"!==r[0]&&!r.startsWith("http://")&&!r.startsWith("https://"))throw new InvalidArgumentError("path must be an absolute URL or start with a slash");if("string"!=typeof t)throw new InvalidArgumentError("method must be a string");if(o&&"string"!=typeof o)throw new InvalidArgumentError("upgrade must be a string");if(null!=h&&(!Number.isFinite(h)||h<0))throw new InvalidArgumentError("invalid headersTimeout");if(null!=l&&(!Number.isFinite(l)||l<0))throw new InvalidArgumentError("invalid bodyTimeout");if(this.headersTimeout=h,this.bodyTimeout=l,this.method=t,null==n)this.body=null;else if(util.isStream(n))this.body=n;else if(n instanceof DataView)this.body=n.buffer.byteLength?Buffer.from(n.buffer):null;else if(n instanceof ArrayBuffer||ArrayBuffer.isView(n))this.body=n.byteLength?Buffer.from(n):null;else if(util.isBuffer(n))this.body=n.byteLength?n:null;else if("string"==typeof n)this.body=n.length?Buffer.from(n):null;else{if(!util.isIterable(n)&&!util.isBlobLike(n))throw new InvalidArgumentError("body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable");this.body=n}if(this.completed=!1,this.aborted=!1,this.upgrade=o||null,this.path=r,this.origin=e,this.idempotent=null==i?"HEAD"===t||"GET"===t:i,this.blocking=null!=a&&a,this.host=null,this.contentLength=null,this.contentType=null,this.headers="",Array.isArray(s)){if(s.length%2!=0)throw new InvalidArgumentError("headers array must be even");for(let e=0;e<s.length;e+=2)processHeader(this,s[e],s[e+1])}else if(s&&"object"==typeof s){const e=Object.keys(s);for(let r=0;r<e.length;r++){const t=e[r];processHeader(this,t,s[t])}}else if(null!=s)throw new InvalidArgumentError("headers must be an object or an array");util.isBlobLike(n)&&null==this.contentType&&n.type&&(this.contentType=n.type,this.headers+=`content-type: ${n.type}\r\n`),util.validateHandler(d,t,o),this.servername=util.getServerName(this.host),this[kHandler]=d,channels.create.hasSubscribers&&channels.create.publish({request:this})}onBodySent(e){if(this[kHandler].onBodySent)try{this[kHandler].onBodySent(e)}catch(e){this.onError(e)}}onRequestSent(){channels.bodySent.hasSubscribers&&channels.bodySent.publish({request:this})}onConnect(e){return assert(!this.aborted),assert(!this.completed),this[kHandler].onConnect(e)}onHeaders(e,r,t,n){return assert(!this.aborted),assert(!this.completed),channels.headers.hasSubscribers&&channels.headers.publish({request:this,response:{statusCode:e,headers:r,statusText:n}}),this[kHandler].onHeaders(e,r,t,n)}onData(e){return assert(!this.aborted),assert(!this.completed),this[kHandler].onData(e)}onUpgrade(e,r,t){return assert(!this.aborted),assert(!this.completed),this[kHandler].onUpgrade(e,r,t)}onComplete(e){return assert(!this.aborted),this.completed=!0,channels.trailers.hasSubscribers&&channels.trailers.publish({request:this,trailers:e}),this[kHandler].onComplete(e)}onError(e){if(channels.error.hasSubscribers&&channels.error.publish({request:this,error:e}),!this.aborted)return this.aborted=!0,this[kHandler].onError(e)}addHeader(e,r){return processHeader(this,e,r),this}}function processHeader(e,r,t){if(t&&"object"==typeof t)throw new InvalidArgumentError(`invalid ${r} header`);if(void 0!==t)if(null===e.host&&4===r.length&&"host"===r.toLowerCase())e.host=t;else if(null===e.contentLength&&14===r.length&&"content-length"===r.toLowerCase()){if(e.contentLength=parseInt(t,10),!Number.isFinite(e.contentLength))throw new InvalidArgumentError("invalid content-length header")}else if(null===e.contentType&&12===r.length&&"content-type"===r.toLowerCase())e.contentType=t,e.headers+=`${r}: ${t}\r\n`;else{if(17===r.length&&"transfer-encoding"===r.toLowerCase())throw new InvalidArgumentError("invalid transfer-encoding header");if(10===r.length&&"connection"===r.toLowerCase())throw new InvalidArgumentError("invalid connection header");if(10===r.length&&"keep-alive"===r.toLowerCase())throw new InvalidArgumentError("invalid keep-alive header");if(7===r.length&&"upgrade"===r.toLowerCase())throw new InvalidArgumentError("invalid upgrade header");if(6===r.length&&"expect"===r.toLowerCase())throw new NotSupportedError("expect header not supported");e.headers+=`${r}: ${t}\r\n`}}module.exports=Request;