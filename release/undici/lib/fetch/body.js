/*! For license information please see body.js.LICENSE.txt */
"use strict";const util=require("../core/util"),{ReadableStreamFrom,toUSVString,isBlobLike}=require("./util"),{FormData}=require("./formdata"),{kState,kError}=require("./symbols"),{Blob}=require("buffer"),{kBodyUsed}=require("../core/symbols"),assert=require("assert"),nodeUtil=require("util"),{NotSupportedError}=require("../core/errors");let ReadableStream;async function*blobGen(e){e.stream?yield*e.stream():yield await e.arrayBuffer()}function extractBody(e,t=!1){ReadableStream||(ReadableStream=require("stream/web").ReadableStream);let r=null,a=null,o=null,n=null,s=null;if(null==e);else if(e instanceof URLSearchParams)o=e.toString(),s="application/x-www-form-urlencoded;charset=UTF-8";else if(e instanceof ArrayBuffer||ArrayBuffer.isView(e))e instanceof DataView&&(e=e.buffer),o=new Uint8Array(e);else if(e instanceof FormData){const t="----formdata-undici-"+Math.random(),r=`--${t}\r\nContent-Disposition: form-data`,n=e=>e.replace(/\n/g,"%0A").replace(/\r/g,"%0D").replace(/"/g,"%22"),i=e=>e.replace(/\r?\n|\r/g,"\r\n");a=async function*(e){const a=new TextEncoder;for(const[t,o]of e)"string"==typeof o?yield a.encode(r+`; name="${n(i(t))}"`+`\r\n\r\n${i(o)}\r\n`):(yield a.encode(r+`; name="${n(i(t))}"`+(o.name?`; filename="${n(o.name)}"`:"")+"\r\n"+`Content-Type: ${o.type||"application/octet-stream"}\r\n\r\n`),yield*blobGen(o),yield a.encode("\r\n"));yield a.encode(`--${t}--`)},o=e,s="multipart/form-data; boundary="+t}else if(isBlobLike(e))a=blobGen,o=e,n=e.size,e.type&&(s=e.type);else if("function"==typeof e[Symbol.asyncIterator]){if(t)throw new TypeError("keepalive");if(util.isDisturbed(e)||e.locked)throw new TypeError("Response body object should not be disturbed or locked");r=e instanceof ReadableStream?e:ReadableStreamFrom(e)}else o=toUSVString(e),s="text/plain;charset=UTF-8";if(("string"==typeof o||util.isBuffer(o))&&(n=Buffer.byteLength(o)),null!=a){let t;r=new ReadableStream({async start(){t=a(e)[Symbol.asyncIterator]()},async pull(e){const{value:a,done:o}=await t.next();return o?queueMicrotask((()=>{e.close()})):/state: 'errored'/.test(nodeUtil.inspect(r))||e.enqueue(new Uint8Array(a)),e.desiredSize>0},async cancel(e){await t.return()}})}else r||(r=new ReadableStream({async pull(e){e.enqueue("string"==typeof o?(new TextEncoder).encode(o):o),queueMicrotask((()=>{e.close()}))}}));return[{stream:r,source:o,length:n},s]}function safelyExtractBody(e,t=!1){return ReadableStream||(ReadableStream=require("stream/web").ReadableStream),e instanceof ReadableStream&&(assert(!util.isDisturbed(e),"disturbed"),assert(!e.locked,"locked")),extractBody(e,t)}function cloneBody(e){const[t,r]=e.stream.tee();return e.stream=t,{stream:r,length:e.length,source:e.source}}const methods={async blob(){const e=[];if(this[kState].body){const t=this[kState].body.stream;if(t[kError])throw t[kError];if(util.isDisturbed(t))throw new TypeError("disturbed");if(t.locked)throw new TypeError("locked");t[kBodyUsed]=!0;for await(const r of t)e.push(r)}return new Blob(e,{type:this.headers.get("Content-Type")||""})},async arrayBuffer(){const e=await this.blob();return await e.arrayBuffer()},async text(){const e=await this.blob();return toUSVString(await e.text())},async json(){return JSON.parse(await this.text())},async formData(){const e=this.headers.get("Content-Type");if(/multipart\/form-data/.test(e))throw new NotSupportedError("multipart/form-data not supported");if(/application\/x-www-form-urlencoded/.test(e)){let e;try{e=new URLSearchParams(await this.text())}catch(e){throw Object.assign(new TypeError,{cause:e})}const t=new FormData;for(const[r,a]of e)t.append(r,a);return t}throw new TypeError}},properties={body:{enumerable:!0,get(){return this[kState].body?this[kState].body.stream:null}},bodyUsed:{enumerable:!0,get(){return this[kState].body&&util.isDisturbed(this[kState].body.stream)}}};function cancelBody(e,t){e.stream&&!/state: 'errored'/.test(nodeUtil.inspect(e.stream))&&e.stream.cancel(t)}function mixinBody(e){Object.assign(e,methods),Object.defineProperties(e,properties)}module.exports={cancelBody,extractBody,safelyExtractBody,cloneBody,mixinBody};