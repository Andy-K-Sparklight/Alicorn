"use strict";const{kClients}=require("../core/symbols"),Agent=require("../agent"),{kAgent,kMockAgentSet,kMockAgentGet,kDispatches,kIsMockActive,kNetConnect,kGetNetConnect,kOptions,kFactory}=require("./mock-symbols"),MockClient=require("./mock-client"),MockPool=require("./mock-pool"),{matchValue,buildMockOptions}=require("./mock-utils"),{InvalidArgumentError}=require("../core/errors"),Dispatcher=require("../dispatcher"),{WeakRef}=require("../compat/dispatcher-weakref")();class MockAgent extends Dispatcher{constructor(t){if(super(t),this[kNetConnect]=!0,this[kIsMockActive]=!0,t&&t.agent&&"function"!=typeof t.agent.dispatch)throw new InvalidArgumentError("Argument opts.agent must implement Agent");const e=t&&t.agent?t.agent:new Agent(t);this[kAgent]=e,this[kClients]=e[kClients],this[kOptions]=buildMockOptions(t)}get(t){let e=this[kMockAgentGet](t);return e||(e=this[kFactory](t),this[kMockAgentSet](t,e)),e}dispatch(t,e){return this.get(t.origin),this[kAgent].dispatch(t,e)}async close(){await this[kAgent].close(),this[kClients].clear()}deactivate(){this[kIsMockActive]=!1}activate(){this[kIsMockActive]=!0}enableNetConnect(t){if("string"==typeof t||"function"==typeof t||t instanceof RegExp)Array.isArray(this[kNetConnect])?this[kNetConnect].push(t):this[kNetConnect]=[t];else{if(void 0!==t)throw new InvalidArgumentError("Unsupported matcher. Must be one of String|Function|RegExp.");this[kNetConnect]=!0}}disableNetConnect(){this[kNetConnect]=!1}[kMockAgentSet](t,e){this[kClients].set(t,new WeakRef(e))}[kFactory](t){const e=Object.assign({agent:this},this[kOptions]);return this[kOptions]&&1===this[kOptions].connections?new MockClient(t,e):new MockPool(t,e)}[kMockAgentGet](t){const e=this[kClients].get(t);if(e)return e.deref();if("string"!=typeof t){const e=this[kFactory]("http://localhost:9999");return this[kMockAgentSet](t,e),e}for(const[e,n]of Array.from(this[kClients])){const o=n.deref();if(o&&"string"!=typeof e&&matchValue(e,t)){const e=this[kFactory](t);return this[kMockAgentSet](t,e),e[kDispatches]=o[kDispatches],e}}}[kGetNetConnect](){return this[kNetConnect]}}module.exports=MockAgent;